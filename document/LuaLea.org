* 单文件编译
  gcc name.c -fPIC -shared // 运行会出现core dump
* 在Linux的工程中使用lua
** 具体使用方法如下
   1. 下载最新的lua源码
   2. 在自己的工程中添加一个依赖库的目录，比如deps
   3. 将lua的源码解压到deps目录下
   4. 进入lua的src目录下，执行make a，以此生成静态库文件
   5. 编译自己的工程， 以一个简单的测试文件为例，使用如下的编译命令
      gcc -o main -I./deps/lua/src ./deps/lua/src/liblua.a -lm -ldl main.c
      #用到了数学库
   6. 编译完之后，就可以直接执行main文件了
** Lua 编译问题总结
   http://blog.csdn.net/wangbin579/article/details/7265405
   1. 缺少-ldl，会出现以下错误
      /usr/local/lib/liblua.a(loadlib.o): In function `gctm': 
      loadlib.c:(.text+0x35): undefined reference to `dlclose'
      ... 
   2. 缺少liblua.a，会出现以下错误
      /tmp/ccCT0d24.o: In function `main': 
      /home/wangbin/work/tmp/lua/test.c:26: undefined reference to `luaL_newstate' 
      ...
   3. 缺少-lm，会包数学库的错误
** Lua 头文件的说明
*** lua.h
    defines the basic functions provided by Lua.
    It includes functions to create a new Lua environment, to invoke
    Lua functions (such as lua_pcall), to read and write global variables in the
    Lua environment, to register new functions to be called by Lua, and so on.
    Everything defined in lua.h has a lua_ prefix
*** lauxlib.h
    defines the functions provided by the auxiliary library (auxlib).
    All its definitions start with luaL_ (e.g., luaL_loadbuffer).
    The auxiliary library uses the basic API provided by lua.h to provide a
    higher abstraction level; all Lua standard libraries use the auxlib.
    The basic API strives for economy and orthogonality,
    whereas auxlib strives for practicality for common tasks.
    the auxlib has no access to the internals of Lua.
    It does its entire job through the official basic API.
*** lualib.h
    When luaL_newstate creates a fresh environment, this environment contains
    no predefined functions, not even print. To keep Lua small,
    all standard libraries are provided as separate packages,
    so that you do not have to use them if you do not need to.
    defines functions to open the libraries.
    The function luaL_openlibs opens all standard libraries.
* Lua源码阅读
  在reddit上LuaJIT的作者推荐了一个Lua源码的阅读顺序
  http://www.reddit.com/comments/63hth/ask_reddit_which_oss_codebases_out_there_are_so/c02pxbp
** 代码风格
   lua的内部模块暴露出来的API以luaX_xxx风格命名，即lua后跟
   一个大写字母表示内部模块名，而后由下划线加若干小写字母描述
   方法名。

   供外部程序使用的API则使用lua_xxx命名风格 。
** lua 的特性
   不同的lua虚拟机之间的工作是线程安全的，因为一切和虚拟机相关的内存操作都被关联
   到虚拟机对象中，而没有利用任何其他共享变量。

   lua的虚拟机核心部分没有任何的系统调用，正确的使用lua，不会对系统造成任何干扰，
   lua让用户自行定义内存管理器。
   
